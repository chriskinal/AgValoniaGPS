using System.Collections.Generic;

namespace AgValoniaGPS.Models.FieldOperations;

/// <summary>
/// Represents a complete Dubins path solution from start to goal pose.
/// Contains path metadata and the sequence of waypoints.
/// </summary>
public class DubinsPath
{
    /// <summary>
    /// Creates a new Dubins path.
    /// </summary>
    /// <param name="pathType">The type of Dubins path (RSR, LSL, etc.)</param>
    /// <param name="segment1Length">Length of first segment in meters</param>
    /// <param name="segment2Length">Length of second segment in meters</param>
    /// <param name="segment3Length">Length of third segment in meters</param>
    /// <param name="segment1Tangent">Tangent point between segment 1 and 2</param>
    /// <param name="segment2Tangent">Tangent point between segment 2 and 3</param>
    public DubinsPath(
        DubinsPathType pathType,
        double segment1Length,
        double segment2Length,
        double segment3Length,
        Position2D segment1Tangent,
        Position2D segment2Tangent)
    {
        PathType = pathType;
        Segment1Length = segment1Length;
        Segment2Length = segment2Length;
        Segment3Length = segment3Length;
        TotalLength = segment1Length + segment2Length + segment3Length;
        Segment1Tangent = segment1Tangent;
        Segment2Tangent = segment2Tangent;
        Waypoints = new List<DubinsPathWaypoint>();
    }

    /// <summary>
    /// The type of Dubins path (RSR, LSL, RSL, LSR, RLR, LRL).
    /// </summary>
    public DubinsPathType PathType { get; }

    /// <summary>
    /// Total path length in meters.
    /// </summary>
    public double TotalLength { get; }

    /// <summary>
    /// Length of the first segment in meters.
    /// </summary>
    public double Segment1Length { get; }

    /// <summary>
    /// Length of the second segment in meters.
    /// </summary>
    public double Segment2Length { get; }

    /// <summary>
    /// Length of the third segment in meters.
    /// </summary>
    public double Segment3Length { get; }

    /// <summary>
    /// Tangent point where segment 1 ends and segment 2 begins.
    /// </summary>
    public Position2D Segment1Tangent { get; }

    /// <summary>
    /// Tangent point where segment 2 ends and segment 3 begins.
    /// </summary>
    public Position2D Segment2Tangent { get; }

    /// <summary>
    /// Whether segment 1 turns right (true) or left (false).
    /// </summary>
    public bool Segment1TurningRight { get; set; }

    /// <summary>
    /// Whether segment 2 is turning (true for RLR/LRL) or straight (false for others).
    /// </summary>
    public bool Segment2IsTurning { get; set; }

    /// <summary>
    /// Whether segment 2 turns right (true) or left (false), only relevant if Segment2IsTurning is true.
    /// </summary>
    public bool Segment2TurningRight { get; set; }

    /// <summary>
    /// Whether segment 3 turns right (true) or left (false).
    /// </summary>
    public bool Segment3TurningRight { get; set; }

    /// <summary>
    /// The sequence of waypoints along the path (position + heading).
    /// Generated by the DubinsPathService after path calculation.
    /// </summary>
    public List<DubinsPathWaypoint> Waypoints { get; set; }

    /// <summary>
    /// Sets the turning direction for all three segments.
    /// </summary>
    public void SetTurningDirections(bool seg1Right, bool seg2Right, bool seg3Right)
    {
        Segment1TurningRight = seg1Right;
        Segment2TurningRight = seg2Right;
        Segment3TurningRight = seg3Right;
    }
}
