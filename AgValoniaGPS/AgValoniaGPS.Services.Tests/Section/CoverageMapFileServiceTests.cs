using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using AgValoniaGPS.Models;
using AgValoniaGPS.Models.Section;
using AgValoniaGPS.Services.Section;
using Xunit;

namespace AgValoniaGPS.Services.Tests.Section;

/// <summary>
/// Tests for CoverageMapFileService
/// Focused on critical file I/O behaviors: save, load, error handling, large files
/// </summary>
public class CoverageMapFileServiceTests : IDisposable
{
    private readonly string _testDirectory;
    private readonly ICoverageMapService _coverageService;
    private readonly CoverageMapFileService _fileService;

    public CoverageMapFileServiceTests()
    {
        // Create temp directory for tests
        _testDirectory = Path.Combine(Path.GetTempPath(), $"AgValoniaGPS_Test_{Guid.NewGuid()}");
        Directory.CreateDirectory(_testDirectory);

        _coverageService = new CoverageMapService();
        _fileService = new CoverageMapFileService(_coverageService);
    }

    public void Dispose()
    {
        // Clean up test directory
        if (Directory.Exists(_testDirectory))
        {
            Directory.Delete(_testDirectory, true);
        }
    }

    [Fact]
    public void SaveCoverage_ValidTriangles_CreatesFileWithCorrectFormat()
    {
        // Arrange
        var triangles = new List<CoverageTriangle>
        {
            CreateTestTriangle(0, 100.0, 200.0),
            CreateTestTriangle(1, 110.0, 210.0),
            CreateTestTriangle(2, 120.0, 220.0)
        };

        // Act
        _fileService.SaveCoverage(_testDirectory, triangles);

        // Assert
        var filePath = Path.Combine(_testDirectory, "Coverage.txt");
        Assert.True(File.Exists(filePath), "Coverage file should be created");

        var content = File.ReadAllText(filePath);
        Assert.Contains("# Coverage Map - Generated by AgValoniaGPS", content);
        Assert.Contains("# Format: SectionId,V1_Lat,V1_Lon,V2_Lat,V2_Lon,V3_Lat,V3_Lon,Timestamp,OverlapCount", content);

        var lines = content.Split('\n').Where(l => !l.TrimStart().StartsWith("#") && !string.IsNullOrWhiteSpace(l)).ToList();
        Assert.Equal(3, lines.Count);
    }

    [Fact]
    public void LoadCoverage_ValidFile_ReturnsCorrectTriangles()
    {
        // Arrange
        var originalTriangles = new List<CoverageTriangle>
        {
            CreateTestTriangle(0, 100.0, 200.0),
            CreateTestTriangle(1, 110.0, 210.0),
            CreateTestTriangle(2, 120.0, 220.0)
        };

        _fileService.SaveCoverage(_testDirectory, originalTriangles);

        // Act
        var loadedTriangles = _fileService.LoadCoverage(_testDirectory);

        // Assert
        Assert.NotNull(loadedTriangles);
        Assert.Equal(3, loadedTriangles.Count);

        for (int i = 0; i < originalTriangles.Count; i++)
        {
            Assert.Equal(originalTriangles[i].SectionId, loadedTriangles[i].SectionId);
            Assert.Equal(originalTriangles[i].OverlapCount, loadedTriangles[i].OverlapCount);

            // Verify vertices (within tolerance for floating point)
            for (int v = 0; v < 3; v++)
            {
                Assert.Equal(originalTriangles[i].Vertices[v].Easting, loadedTriangles[i].Vertices[v].Easting, 6);
                Assert.Equal(originalTriangles[i].Vertices[v].Northing, loadedTriangles[i].Vertices[v].Northing, 6);
            }
        }
    }

    [Fact]
    public void LoadCoverage_LargeFile_LoadsEfficientlyWithChunking()
    {
        // Arrange - Create 50k triangles to test chunked loading
        var largeTriangleSet = new List<CoverageTriangle>();
        for (int i = 0; i < 50000; i++)
        {
            largeTriangleSet.Add(CreateTestTriangle(i % 10, 100.0 + i * 0.01, 200.0 + i * 0.01));
        }

        _fileService.SaveCoverage(_testDirectory, largeTriangleSet);

        // Act
        var startTime = DateTime.UtcNow;
        var loadedTriangles = _fileService.LoadCoverage(_testDirectory);
        var duration = DateTime.UtcNow - startTime;

        // Assert
        Assert.Equal(50000, loadedTriangles.Count);

        // Should load 50k triangles in reasonable time (< 5 seconds)
        Assert.True(duration.TotalSeconds < 5.0, $"Loading took {duration.TotalSeconds:F2}s, expected < 5s");
    }

    [Fact]
    public void LoadCoverage_CorruptedFile_SkipsInvalidLinesAndReturnsValidData()
    {
        // Arrange
        var filePath = Path.Combine(_testDirectory, "Coverage.txt");
        var corruptedContent = @"# Coverage Map - Generated by AgValoniaGPS
# Format: SectionId,V1_Lat,V1_Lon,V2_Lat,V2_Lon,V3_Lat,V3_Lon,Timestamp,OverlapCount
0,100.0,200.0,100.5,200.5,101.0,201.0,2025-10-18T10:30:00,1
CORRUPTED LINE WITH GARBAGE DATA
1,110.0,210.0,110.5,210.5,111.0,211.0,2025-10-18T10:30:01,1
ANOTHER CORRUPTED LINE
2,120.0,220.0,120.5,220.5,121.0,221.0,2025-10-18T10:30:02,1";

        File.WriteAllText(filePath, corruptedContent);

        // Act
        var loadedTriangles = _fileService.LoadCoverage(_testDirectory);

        // Assert
        Assert.NotNull(loadedTriangles);
        Assert.Equal(3, loadedTriangles.Count); // Should load 3 valid triangles, skip 2 corrupted lines

        // No backup file should be created for this case because the file I/O succeeded,
        // only individual lines were skipped during parsing
    }

    [Fact]
    public void AppendCoverage_ExistingFile_AppendsTrianglesWithoutOverwriting()
    {
        // Arrange
        var initialTriangles = new List<CoverageTriangle>
        {
            CreateTestTriangle(0, 100.0, 200.0),
            CreateTestTriangle(1, 110.0, 210.0)
        };

        _fileService.SaveCoverage(_testDirectory, initialTriangles);

        var additionalTriangles = new List<CoverageTriangle>
        {
            CreateTestTriangle(2, 120.0, 220.0),
            CreateTestTriangle(3, 130.0, 230.0)
        };

        // Act
        _fileService.AppendCoverage(_testDirectory, additionalTriangles);

        // Assert
        var allTriangles = _fileService.LoadCoverage(_testDirectory);
        Assert.Equal(4, allTriangles.Count);

        // Verify section IDs
        Assert.Equal(0, allTriangles[0].SectionId);
        Assert.Equal(1, allTriangles[1].SectionId);
        Assert.Equal(2, allTriangles[2].SectionId);
        Assert.Equal(3, allTriangles[3].SectionId);
    }

    [Fact]
    public void LoadCoverage_NonExistentFile_ReturnsEmptyList()
    {
        // Arrange
        var nonExistentDir = Path.Combine(_testDirectory, "NonExistent");

        // Act
        var triangles = _fileService.LoadCoverage(nonExistentDir);

        // Assert
        Assert.NotNull(triangles);
        Assert.Empty(triangles);
    }

    /// <summary>
    /// Helper method to create a test triangle with specified parameters
    /// </summary>
    private CoverageTriangle CreateTestTriangle(int sectionId, double baseEasting, double baseNorthing)
    {
        var v1 = new Position { Easting = baseEasting, Northing = baseNorthing };
        var v2 = new Position { Easting = baseEasting + 0.5, Northing = baseNorthing + 0.5 };
        var v3 = new Position { Easting = baseEasting + 1.0, Northing = baseNorthing + 1.0 };

        return new CoverageTriangle(v1, v2, v3, sectionId)
        {
            Timestamp = DateTime.UtcNow,
            OverlapCount = 1
        };
    }
}
